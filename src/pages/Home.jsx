import React, { useEffect, useRef } from 'react';
import qs from 'qs';
import { useSelector, useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';

import { Categories, Sort, sortPizza, PizzaBlock, Skeleton, Pagination } from '../components/index';
import { SearchContext } from '../App';
import { setCategory, setCurrentPage, setFilters } from '../redux/Slices/filterSlice';
import { fetchPizza } from '../redux/Slices/pizzaSlice';

export const Home = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const isSearch = useRef(false);
  const isMounted = useRef(false);

  const { categoryId, sort, currentPage } = useSelector((state) => state.filter);
  const { items, status } = useSelector((state) => state.pizza);

  const { searchValue } = React.useContext(SearchContext);

  const onClickCategory = (id) => {
    dispatch(setCategory(id));
  };

  const onChangePage = (number) => {
    dispatch(setCurrentPage(number));
  };

  const getPizzas = async () => {
    const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';
    const sortBy = sort.sortProperty.replace('-', '');
    const category = categoryId > 0 ? `category=${categoryId}` : '';
    const search = searchValue ? `search=${searchValue}` : '';

    dispatch(
      fetchPizza({
        order,
        sortBy,
        category,
        search,
        currentPage,
      }),
    );
  };

  // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π—Ü —Ä–µ–Ω–¥–µ—Ä —Ç–æ –ø–æ–∫–∞–∂–∏ url
  // useEffect(() => {
  //   if (isMounted.current) {
  //     const queryString = qs.stringify({
  //       sortProperty: sort.sortProperty,
  //       categoryId,
  //       currentPage,
  //     });

  //     navigate(`?${queryString}`);
  //   }
  //   isMounted.current = true;
  // }, [categoryId, sort.sortProperty, currentPage]);

  // // –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º url –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥–∞–∫—Å
  // useEffect(() => {
  //   if (window.location.search) {
  //     const params = qs.parse(window.location.search.substring(1));

  //     const sort = sortPizza.find((obj) => obj.sortProperty === params.sortProperty);

  //     dispatch(
  //       setFilters({
  //         ...params,
  //         sort,
  //       }),
  //     );
  //     isSearch.current = true;
  //   }
  // }, []);

  useEffect(() => {
    // ************************* –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—É–¥–µ—Ç —Å–∫—Ä–æ–ª–∏—Ç—å –≤–µ—Ä—Ö ******************
    window.scrollTo(0, 0);

    if (!isSearch.current) {
      // –ø–æ—á–µ–º—É —Ç–æ –Ω–µ —Ä–∞–±–æ–∞—Ç–µ—Ç  ( !isSearch.current ) - –∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ‚Ññ15 —É—Ä–æ–∫
      getPizzas();
    }

    isSearch.current = false;
  }, [categoryId, sort.sortProperty, searchValue, currentPage]);

  const skeleton = [...new Array(11)].map((_, i) => <Skeleton key={i} />);

  const pizza = items.map((pizza) => <PizzaBlock key={pizza.id} {...pizza} />);

  return (
    <div className="content">
      <div className="container">
        <div className="content__top">
          <Categories value={categoryId} onClickCategory={onClickCategory} />
          <Sort />
        </div>
        <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
        {status === 'error' ? (
          <div className="content__error-info">
            <h2>
              –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ <span>üòï</span>
            </h2>
            <p>–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–∏—Ü—Ü—ã!!!</p>
          </div>
        ) : (
          <div className="content__items">{status === 'loading' ? skeleton : pizza}</div>
        )}
        <Pagination currentPage={currentPage} onChangePage={onChangePage} />
      </div>
    </div>
  );
};
